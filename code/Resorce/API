"""
name:
date:
description
"""
import socket
import threading
import __validate
import logging

HOST = '127.0.0.1'  # Symbolic name meaning all available interfaces
PORT = 50007  # Arbitrary non-privileged port


def lisening():
    """
    :return:
    """
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.bind((HOST, PORT))
    s.listen(5)
    while True:
        conn, addr = s.accept()
        threading.Thread(target=handle_client, args=(conn,)).start()

def handle_client(conn):
    """
    :param conn:
    :return:
    """
    data = conn.recv(1024)
    print data
    data = data.replace('\r\n', '\n')
    code = __validate.validate_request(data)
    if code  == __validate.OK:
        responce = prosses_request(data)
    elif code == __validate.BAD_REQUEST:
        responce = bad_request(data)
    elif code == __validate.METHOD_NOT_ALLOWED:
        responce = method_not_allowed(data)
    elif code == __validate.NOT_FOUND:
        responce = not_found(data)
    else:
        responce = bad_request(data)
    print responce
    conn.sendall(responce)
    conn.close()


def not_found(request):
    s = ''
    s += "HTTP/1.1 404 NOT FOUND\r\n"
    return s


def prosses_request(request):
    return "HTTP/1.1 200 OK\r\n\r\n"


def method_not_allowed(request):
    s = ''
    s += "HTTP/1.1 405 METHOD NOT ALLOWED\r\n"
    s += "Access-Control-Request-Method: " + " ".join(__validate.URI_PREMITED_LIST[__validate.get_URI(request)]) + '\r\n'
    s += '\r\n'
    return s

def bad_request(request):
    s = ""
    s+= "HTTP/1.1 400 BAD REQUEST\r\n"
    s+= "\r\n"
    return s


def main():
    lisening()


if __name__ == '__main__':
    main()
    global logger
    logger = logging.getLogger('simple_example')
    logger.setLevel(logging.DEBUG)

    # create console handler and set level to debug
    ch = logging.StreamHandler()
    ch.setLevel(logging.DEBUG)

    # create formatter
    formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')

    # add formatter to ch
    ch.setFormatter(formatter)

    # add ch to logger
    logger.addHandler(ch)
